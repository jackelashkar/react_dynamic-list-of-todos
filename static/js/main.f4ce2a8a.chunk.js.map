{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","selectTodo","selectedTodoId","todos","className","map","todo","cn","id","completed","title","type","onClick","TodoFilter","onSelectOption","selectedOption","onHandleQuery","query","value","onChange","event","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","selectedTodo","onCloseModal","useState","user","setUser","getUserFromServer","a","userId","usersFromServer","useEffect","href","email","name","App","setTodos","setSelectedTodoId","setSelectedOption","setQuery","getTodosFromServer","todosFromServer","find","visibleTodos","filter","lowerQuery","toLowerCase","includes","option","length","todoId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f4ce2a8a.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodoId: number;\n  selectTodo: (todoId: number) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  selectTodo,\n  selectedTodoId,\n  todos,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr\n          key={todo.id}\n          data-cy=\"todo\"\n          className={cn({\n            'has-background-info-light': selectedTodoId === todo.id,\n          })}\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          {!todo.completed && <td className=\"is-vcentered\" />}\n          {todo.completed && (\n            <td className=\"is-vcentered\">\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </td>\n          )}\n          <td className=\"is-vcentered is-expanded\">\n            <p className={cn('has-text-success', {\n              'has-text-danger': !todo.completed,\n            })}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => selectTodo(todo.id)}\n            >\n              <span className=\"icon\">\n                <i className={cn('far', {\n                  'fa-eye-slash': todo.id === selectedTodoId,\n                  'fa-eye': todo.id !== selectedTodoId,\n                })}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","type Props = {\n  onSelectOption: (value: string) => void,\n  onHandleQuery: (value: string) => void,\n  selectedOption: string,\n  query: string,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  onSelectOption,\n  selectedOption,\n  onHandleQuery,\n  query,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedOption}\n            onChange={(event) => {\n              onSelectOption(event.target.value);\n            }}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">\n              Completed\n            </option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => {\n            onHandleQuery(event.target.value);\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => {\n                onHandleQuery('');\n              }}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  selectedTodo: Todo;\n  onCloseModal: () => void\n};\n\nexport const TodoModal: React.FC<Props> = ({ selectedTodo, onCloseModal }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const getUserFromServer = async () => {\n    const usersFromServer = await getUser(selectedTodo.userId);\n\n    setUser(usersFromServer);\n  };\n\n  useEffect(() => {\n    getUserFromServer();\n  }, [selectedTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => onCloseModal()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong className={cn({\n                'has-text-success': selectedTodo.completed,\n                'has-text-danger': !selectedTodo.completed,\n              })}\n              >\n                {selectedTodo.completed\n                  ? 'Done'\n                  : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [selectedOption, setSelectedOption] = useState('all');\n  const [query, setQuery] = useState('');\n\n  const getTodosFromServer = async () => {\n    const todosFromServer = await getTodos();\n\n    setTodos(todosFromServer);\n  };\n\n  useEffect(() => {\n    getTodosFromServer();\n  }, []);\n\n  const selectTodo = (todoId: number) => {\n    setSelectedTodoId(todoId);\n  };\n\n  const onCloseModal = () => {\n    setSelectedTodoId(0);\n  };\n\n  const selectedTodo = todos.find(todo => todo.id === selectedTodoId) as Todo;\n\n  const selectOption = (option: string) => {\n    setSelectedOption(option);\n  };\n\n  const handleQuery = (value: string) => {\n    setQuery(value);\n  };\n\n  let visibleTodos = [...todos];\n\n  if (selectedOption === 'completed') {\n    visibleTodos = visibleTodos.filter(todo => todo.completed);\n  }\n\n  if (selectedOption === 'active') {\n    visibleTodos = visibleTodos.filter(todo => !todo.completed);\n  }\n\n  if (query) {\n    const lowerQuery = query.toLowerCase();\n\n    visibleTodos = visibleTodos.filter(todo => (\n      todo.title.toLowerCase().includes(lowerQuery)));\n  }\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                selectedOption={selectedOption}\n                onSelectOption={selectOption}\n                onHandleQuery={handleQuery}\n                query={query}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todos.length === 0\n                ? (<Loader />)\n                : (\n                  <TodoList\n                    selectTodo={selectTodo}\n                    selectedTodoId={selectedTodoId}\n                    todos={visibleTodos}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodoId && (\n        <TodoModal\n          onCloseModal={onCloseModal}\n          selectedTodo={selectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}